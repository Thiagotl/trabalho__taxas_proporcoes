
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R é um software livre e vem sem GARANTIA ALGUMA.
Você pode redistribuí-lo sob certas circunstâncias.
Digite 'license()' ou 'licence()' para detalhes de distribuição.

R é um projeto colaborativo com muitos contribuidores.
Digite 'contributors()' para obter mais informações e
'citation()' para saber como citar o R ou pacotes do R em publicações.

Digite 'demo()' para demonstrações, 'help()' para o sistema on-line de ajuda,
ou 'help.start()' para abrir o sistema de ajuda em HTML no seu navegador.
Digite 'q()' para sair do R.

> # Loading packages and functions -----------------------------------------------
> 
> library(gamlss)
Carregando pacotes exigidos: splines
Carregando pacotes exigidos: gamlss.data

Anexando pacote: ‘gamlss.data’

O seguinte objeto é mascarado por ‘package:datasets’:

    sleep

Carregando pacotes exigidos: gamlss.dist
Carregando pacotes exigidos: nlme
Carregando pacotes exigidos: parallel
 **********   GAMLSS Version 5.4-22  ********** 
For more on GAMLSS look at https://www.gamlss.com/
Type gamlssNews() to see new features/changes/bug fixes.

> 
> source("UQchen.R") # UQC gamlss implementation
> 
> # function to calculate the estimator metrics
> metrics <- function(true_values, mu_result, sigma_result) {
+   
+   # calculating estimation mean
+   mean_values <- c( 
+     apply(mu_result, 2, mean),
+     apply(sigma_result, 2, mean)
+   )
+   # calculating estimation relative bias
+   b_values <- (true_values - mean_values) / true_values * 100
+   # calculating MSE
+   eqm_values <- c( 
+     apply(mu_result, 2, var),
+     apply(sigma_result, 2, var)
+   ) + (true_values - mean_values)^2
+   skewness <- c( 
+     moments::skewness(mu_result),
+     moments::skewness(sigma_result)
+   )
+   kurtosis <- c( 
+     moments::kurtosis(mu_result),
+     moments::kurtosis(sigma_result)
+   )
+   # creating a results matrix
+   result <- cbind(
+     true_values,
+     round(mean_values,3),
+     round(b_values,3),
+     round(eqm_values,3),
+     round(skewness,3),
+     round(kurtosis,3)
+   )
+   colnames(result) <- c("true value", "mean", "relative_bias", "eqm", "SK", "KUR") # metrics
+   rownames(result) <- c("b1", "b2", "g1", "g2") # par names
+   return(result)
+ }
> 
> 
> # Simulation -------------------------------------------------------------------
> 
> # fixing scenario
> { set.seed(15) # fixing seed
+   # n <- 100 # sample size
+   ns <- c(50, 150, 250, 500) # sample sizes
+   RS <- 5500 # Monte Carlo replics simulated
+   RR <- 5000 # Monte Carlo replics required
+   # Creating link functions
+   logit_link <- make.link("logit")
+   log_link <- make.link("log")
+   # Fixing true par values
+   b1 <- 1.6
+   b2 <- -0.7
+   g1 <- 0.5
+   g2 <- -1
+   true_values <- c(b1, b2, g1, g2)
+   # Objects to save the estimation results
+   mu_temp <- sigma_temp <- matrix(NA, RS, 2)
+   fits <- list() # list to save all fits
+   }
> 
> # Monte Carlo loop
> for (j in 1:length(ns)) {
+   X <- runif(ns[j])
+   mu_true <- logit_link$linkinv(b1 + b2 * X)
+   sigma_true <- log_link$linkinv(g1 + g2 * X)
+   for (i in 1:RS) {
+     y <- rUQC(ns[j], mu_true, sigma_true)
+     fit <- try(gamlss(y ~ X,
+       sigma.formula = ~X,
+       family = UQC(mu.link = "logit", sigma.link = "log"),
+       trace = F, method = RS()
+     ), silent = TRUE)
+     
+     # if fit fails, return NA
+     if (!inherits(fit, "try-error")) {
+       mu_temp[i, ] <- fit$mu.coefficients 
+       sigma_temp[i, ] <- fit$sigma.coefficients
+     } else {
+       mu_temp[i, ] <- rep(NA, 2)
+       sigma_temp[i, ] <- rep(NA, 2)
+     }
+   }
+   
+   # Selecting only RR replics
+   mu_result <- na.omit(mu_temp)[1:RR,]
+   sigma_result <- na.omit(sigma_temp)[1:RR,]
+   
+   fits[[j]] <- metrics(true_values, mu_result, sigma_result)
+ }
Mensagen de aviso:
In RS() : Algorithm RS has not yet converged
> 
> fits
[[1]]
   true value   mean relative_bias   eqm     SK   KUR
b1        1.6  1.618        -1.112 0.083  0.256 3.031
b2       -0.7 -0.728        -3.951 0.366 -0.032 3.166
g1        0.5  0.565       -12.911 0.087  0.150 3.160
g2       -1.0 -1.022        -2.176 0.224  0.098 3.128

[[2]]
   true value   mean relative_bias   eqm    SK   KUR
b1        1.6  1.602        -0.109 0.026 0.095 2.949
b2       -0.7 -0.708        -1.090 0.119 0.004 3.036
g1        0.5  0.519        -3.798 0.023 0.031 3.029
g2       -1.0 -1.001        -0.149 0.065 0.094 3.133

[[3]]
   true value   mean relative_bias   eqm    SK   KUR
b1        1.6  1.605        -0.287 0.013 0.125 3.029
b2       -0.7 -0.710        -1.437 0.065 0.007 2.847
g1        0.5  0.512        -2.414 0.012 0.037 2.921
g2       -1.0 -1.002        -0.221 0.035 0.055 2.924

[[4]]
   true value   mean relative_bias   eqm     SK   KUR
b1        1.6  1.601        -0.050 0.006  0.096 3.027
b2       -0.7 -0.700         0.056 0.031 -0.021 2.943
g1        0.5  0.505        -1.001 0.006  0.073 3.061
g2       -1.0 -1.001        -0.063 0.018 -0.007 3.042

> 
> 
> 
> proc.time()
  usuário   sistema decorrido 
  385.052     1.435   384.576 
